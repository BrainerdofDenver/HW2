Andrew Brainerd
CS2: Data Structures and Algorithms
HW2 Chap 1.1, 1.1.1 through 1.1.8 and 1.1.12

1.1.1
	a. Integer division yeilds 7, remainders are truncated.
	b. 200.0000002
	c. Boolean algebra expression: (not A and A) ored with (A and A) yeilds A : True
	
1.1.2
	a. (1+2.236)/2 results in a double: 1.618 despite jGrasp flagging it as a loss in precision
	b. 1+2+3+4.0 would result in a double: 10.0
	c. 4.1 >= 4 would caste the 4 to a double, 4.0 and would yeild True
	d. 1 + 2 + "3" : the first addition is a primative operation between ints while the second addition is concatination 3 and "3"
	   resulting in a Char "33"
	   
1.1.3

import java.util.Scanner;

class tstEq{
   public static void main(String[] args){
      Scanner inp = new Scanner(System.in);
      
      //Asks users for integer input for 3 variables
      System.out.println("Define first integer value");
      int firstInt = inp.nextInt();
      System.out.println("Define second integer value");
      int secondInt = inp.nextInt();
      System.out.println("Define third integer value");
      int thirdInt = inp.nextInt();
      
      //Tests for equality within nested if statements
      if ((firstInt == secondInt) && (firstInt == thirdInt)){
         if (secondInt == thirdInt){
            System.out.println("Equal");
         }
         else System.out.println("Not equal");
      }
      else System.out.println("Not equal");
   }
}

1.1.4
	a. if (a > b) then c = 0; This statement is not java syntax
	b. if a > b { c = 0; }    This statement does not enclose the feilds to be tested in parenthesis
	c. if (a > b) c = 0;	  Properly executed
	d. if (a > b) c = 0 else b = 0; This is missing a semicolon after c=0 and also has a hanging else statement.
	
1.1.5
	*assume doubles x and y have already been initilized
	if ( ( x < 1.0) && (x > 0.0) ){
		if ((y < 1.0) && (y > 0.0)){
			System.out.println("True");
		}
		else System.out.println("False");
	}
	else System.out.println("False");
	
1.1.6
	  0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610
	  
1.1.7
	a. 3.00009
	b. 499500
	c. 1023
	
1.1.8
	a. Prints the char b
	b. Prints the ASCII addition of the two char b & c: 197
	c. Prints the ASCII character 4 positions after the char a: e
	
1.1.12
	0, 1, 2, 3, 4, 5, 6, 7, 8, 9: The values in the array have no consequnce on the print statement.
	
	
	
	
	
	
	
	
	
	